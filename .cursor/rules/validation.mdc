---
description: Validation guidelines using arktype for type-safe validation in both client and server code
globs: src/**/*.api.ts, src/**/*.server.ts, src/components/forms/**/*
---
# ArkType Guidelines

## Form Validation

```typescript
import { arktypeResolver } from '@hookform/resolvers/arktype'
import { type } from 'arktype'

// Basic form with required fields and react-hook-form
const formSchema = type({
  name: 'string >= 1',      // non-empty string
  email: 'string >= 1',     // non-empty string
  'age?': 'number > 0',     // optional positive number
})

const Form = () => {
  const form = useForm({
    resolver: arktypeResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
    }
  })

  return (
    <form onSubmit={form.handleSubmit((data) => mutate({ data }))}>
      {/* form fields */}
    </form>
  )
}

// Complex form with nested objects and arrays
const userFormSchema = type({
  name: 'string >= 1',
  'addresses?': {
    street: 'string >= 1',
    'unit?': 'string',
    city: 'string >= 1',
    country: "'US' | 'CA' | 'UK'"  // union of literal strings
  }[]  // array of address objects
})
```

## API Layer (TanStack Start)

```typescript
// Basic mutation with string validation
const $updateName = createServerFn({ method: 'POST' })
  .validator(type({ 
    name: 'string >= 1' 
  }))
  .handler(async ({ data: { name } }) => {
    // handler code
  })

// Complex mutation with nested validation
const $updateUser = createServerFn({ method: 'POST' })
  .validator(type({
    user: {
      name: 'string >= 1',
      'role?': "'admin' | 'user'",
      preferences: {
        theme: "'light' | 'dark' | 'system'",
        'notifications?': 'boolean'
      }
    }
  }))
  .handler(async ({ data }) => {
    // handler code
  })
```

## Route Search Params

```typescript
// Always define schema outside route for proper type inference
const searchSchema = type({
  'redirectTo?': 'string',
  'tab?': "'overview' | 'settings' | 'billing'",
  'page?': type('string').pipe(val => parseInt(val, 10))  // transform to number
})

export const Route = createFileRoute('/path')({
  validateSearch: searchSchema,
  component: YourComponent
})

// Usage in component
function YourComponent() {
  const { redirectTo, tab, page } = Route.useSearch()
  // redirectTo?: string
  // tab?: 'overview' | 'settings' | 'billing'
  // page?: number
}
```

## Common Patterns

```typescript
// String length constraints
type({
  username: 'string >= 3 <= 20',  // between 3 and 20 chars
  bio: 'string <= 500'            // max 500 chars
})

// Numeric constraints
type({
  age: 'number >= 18',            // min 18
  score: 'number >= 0 <= 100'     // between 0 and 100
})

// Transformations
type({
  // Transform after validation
  createdAt: type('string')
    .pipe(val => new Date(val)),
  
  // Array of specific values
  roles: type('string')
    .pipe(val => val.split(','))
    .to("('admin' | 'user')[]"),
  
  // Trim and lowercase email
  email: type('string')
    .pipe(val => val.trim().toLowerCase())
})

// Complex objects
type({
  user: {
    id: 'string',
    'profile?': {
      'avatar?': 'string',
      'bio?': 'string <= 1000'
    },
    preferences: {
      theme: "'light' | 'dark' = 'light'",
      'notifications?': 'boolean = true'
    }
  }
})
```