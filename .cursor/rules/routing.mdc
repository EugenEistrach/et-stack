---
description: Routing guidelines for TanStack Router including route types, creation, and navigation patterns
globs: src/routes/**/*
---
# Routing Guidelines

## Route Types

- **Public Routes** (`src/routes/_marketing/`): Marketing/public pages
- **Auth Routes** (`src/routes/(auth)/`): Authentication-related pages
- **Dashboard Routes** (`src/routes/dashboard/`): Protected pages requiring authentication
- **Admin Routes** (`src/routes/dashboard/admin/`): Protected pages requiring admin role

## Adding a New Route

1. **Add translations**
   - Add required texts (labels, titles, etc. to [en.json](mdc:Users/eugeneistrach/Projects/perfux/repositories/perfux-accounting/messages/en.json)
   - Check [i18n.mdc](mdc:.cursor/rules/i18n.mdc) for more details

2. **Create route file**
   - Public route: Create in `src/routes/_marketing/`
   - Auth route: Create in `src/routes/(auth)/`
   - Dashboard route: Create in `src/routes/dashboard/`
   - Admin route: Create in `src/routes/dashboard/admin/`

3. **Implement route**
   ```tsx
   import * as m from '@/lib/paraglide/messages'
   import { createFileRoute } from '@tanstack/react-router'

   export const Route = createFileRoute('/your-path')({
     // Optional: Add breadcrumb
     loader: () => ({
       crumb: m.your_crumb(),
     }),
     component: YourComponent,
   })
   ```

4. **For dashboard/admin routes only: Add to navigation**
   Edit [dashboard.tsx](mdc:src/routes/dashboard.tsx):
   ```tsx
   import { YourIcon } from 'lucide-react'
   
   <SidebarMenu>
     <SidebarMenuItem>
       <SidebarMenuButton tooltip={m.nav_label()} asChild>
         <NavLink to="/dashboard/your-route">
           <YourIcon />
           <span>{m.nav_label()}</span>
         </NavLink>
       </SidebarMenuButton>
     tem>
   </SidebarMenu>
   ```

## Additional Features

### Nested Routes
```tsx
// Parent: /dashboard/parent/index.tsx
export const Route = createFileRoute('/dashboard/parent')({
  component: () => <Outlet />,
})

// Child: /dashboard/parent/child.tsx
export const Route = createFileRoute('/dashboard/parent/child')({
  component: ChildComponent,
})
```

### Page Title
```tsx
head: () => ({
  meta: [{ title: m.page_title() }],
})
```

## Authorization

- Authorization is handled automatically by parent layouts
- Place routes in correct directory for proper protection
- No explicit auth checks needed in route files