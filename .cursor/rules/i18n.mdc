---
description: MANDATORY: Internationalization guidelines for managing translations and language support
globs: *.tsx
---
# Internationalization (i18n) Guidelines

## Adding Translations

1. Search for existing translations json files. They are in our ./messages directory
2. Add translations to ALL files (**use human readable random generated IDs**) e.g:
   ```json
   // ./messages/en.json
   {
      "pink_spry_snake_hike": "Speichern",
      "full_house_lion_zoom": "Welcome Onboard!",
      "proof_real_beaver_list": "{from} to {to} of {total} entries",
      "glad_odd_bat_chop": "Light",
      "spry_crazy_eagle_propel": "Dark",
      "keen_helpful_coyote_urge": "System",
   }
   ```

3. Compile translations !IMPORTANT:
   ```bash
   pnpm build:paraglide
   ```

4. Use in components:
   ```tsx
   import * as m from '@/lib/paraglide/messages'

   // Basic usage
   function SaveButton() {
     return <Button>{m.pink_spry_snake_hike()}</Button>
   }

   // With parameters
   function WelcomeMessage({ name }: { name: string }) {
     return <span>{m.full_house_lion_zoom({ name })}</span>
   }

   function PaginationInfo({ from, to, total }: { from: number; to: number; total: number }) {
     return <span>{m.proof_real_beaver_list({ from, to, total })}</span>
   }

   // Conditional translations - define maps outside components
   const themeMessages = {
     light: m.glad_odd_bat_chop,
     dark: m.spry_crazy_eagle_propel,
     system: m.keen_helpful_coyote_urge,
   } as const

   function ThemeLabel({ theme }: "light" | "dark" | "system") {
     return <span>{themeMessages[theme]()}</span>
   }

   // Usage
   function ThemeSelector() {
     return (
       <div>
         <ThemeLabel theme="light" />
         <ThemeLabel theme="dark" />
         <ThemeLabel theme="system" />
       </div>
     )
   }
   ```

## Steps 

1. Search for existing translations json files inside **./messages** directory
2. Add translations to **ALL** files with **RANDOM_HUMAN_READABLE_ID**
3. Run `pnpm build:paraglide` to compile translations
4. Add to components


