---
description: MANDATORY: Internationalization guidelines for managing translations and language support
globs: *
---
# Internationalization (i18n) Guidelines

## Adding Translations

1. Add translations to JSON files:
   ```json
   // messages/en.json
   {
     "save_changes": "Save Changes",
     "welcome_message": "Welcome back, {name}!",
     "showing_results": "{from} to {to} of {total} entries",
     "theme_light": "Light",
     "theme_dark": "Dark",
     "theme_system": "System"
   }
   ```

2. Compile translations:
   ```bash
   pnpm build:paraglide
   ```

3. Use in components:
   ```tsx
   import * as m from '@/lib/paraglide/messages'

   // Basic usage
   function SaveButton() {
     return <Button>{m.save_changes()}</Button>
   }

   // With parameters
   function WelcomeMessage({ name }: { name: string }) {
     return <span>{m.welcome_message({ name })}</span>
   }

   function PaginationInfo({ from, to, total }: { from: number; to: number; total: number }) {
     return <span>{m.showing_results({ from, to, total })}</span>
   }

   // Conditional translations - define maps outside components
   const themeMessages = {
     light: m.theme_light,
     dark: m.theme_dark,
     system: m.theme_system,
   } as const

   function ThemeLabel({ theme }: "light" | "dark" | "system") {
     return <span>{themeMessages[theme]()}</span>
   }

   // Usage
   function ThemeSelector() {
     return (
       <div>
         <ThemeLabel theme="light" />
         <ThemeLabel theme="dark" />
         <ThemeLabel theme="system" />
       </div>
     )
   }
   ```

## Guidelines

- Add translations for all supported languages
- Only translate text content, not technical values
- Always compile after adding new translations
- Never hardcode text strings