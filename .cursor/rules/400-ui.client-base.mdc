---
description: Guidelines for dumb React components with React 19 and Storybook-first development
globs: *.tsx
---

guidelines:
  state_management:
    - Keep components dumb and free of data fetching logic
    - Data fetching and state management should be in container/page components
    - Pass data and callbacks as props to components
    - Use TanStack Router and Query only in containers/pages
    - useState only for component local state
    - Avoid useEffect except for external system synchronization

  react_19_features:
    - Automatic ref forwarding to DOM elements
    - No need for forwardRef wrapper
    - Use ComponentProps for proper typing
    - Simplified component definitions

  component_practices:
    - Build dumb, reusable components that are easy to test
    - Components should accept data and callbacks via props
    - Single responsibility per component
    - Composition over inheritance
    - Extract reusable logic to hooks
    - Use TypeScript discriminated unions for props
    - Follow prop naming conventions (e.g., onSubmit, isLoading)
    - Use Tailwind classes instead of inline styles
    - Keep components small and manageable
    - Design components for Storybook first

examples:
  ref_forwarding:
    react_18: |
      const Input = forwardRef<HTMLInputElement>((props, ref) => (
        <input ref={ref} {...props} />
      ))

    react_19: |
      const Input = ({ ref, ...props }: ComponentProps<'input'>) =>
        <input ref={ref} {...props} />

    usage: |
      const MyForm = () => {
        const inputRef = useRef<HTMLInputElement>(null)
        return <Input ref={inputRef} type="text" placeholder="Enter text" />
      }

  dumb_component: |
    const UserCard = ({
      user,
      onEdit,
      isEditable = false
    }: {
      user: User
      onEdit: (id: string) => void
      isEditable?: boolean
    }) => (
      <div className="p-4 border rounded">
        <h3>{user.name}</h3>
        {isEditable && (
          <Button onClick={() => onEdit(user.id)}>Edit</Button>
        )}
      </div>
    )

    // Usage in container/page:
    const UserPage = () => {
      const { data: user } = useUser()
      const { mutate: editUser } = useEditUserMutation()

      return user ? (
        <UserCard
          user={user}
          onEdit={editUser}
          isEditable={true}
        />
      ) : null
    }

key_points:
  state:
    - Keep data fetching in containers/pages
    - Pass data down via props
    - Local state with useState only
    - Minimal useEffect usage

  components:
    - Build dumb, reusable components
    - Focus on single responsibility
    - Design for Storybook testing
    - Use composition patterns
    - Leverage TypeScript features
    - Follow naming conventions
    - Maintain small component size

  styling:
    - Use Tailwind classes
    - Avoid inline styles
    - Keep styling consistent
