---
description: API layer guidelines including TanStack Start server functions, query/mutation patterns, and best practices
globs: 
---
# API Layer Guidelines

## Core Concepts & Structure

Refer to [validation.mdc](mdc:.cursor/rules/validation.mdc) for more details on validations.

```typescript
// 1. Query/Mutation Options (top)
export const useDataQueryOptions = (params: DataParams) =>
  queryOptions({
    queryKey: ['data', params],
    queryFn: () => $getData({ data: params }),
  })

// 2. Private Server Functions (bottom, prefixed with $)
const $getData = createServerFn({ method: 'GET' })
  .validator(type({ 
    name: 'string >= 1' 
  }))
  .handler(async ({ data }) => {
    const {user, session} = requireAuthSession()
    // Implementation
  })
```

## File Organization

```
src/features/
└── feature-name/
    └── api/
        └── module-name.api.ts  # API endpoints
```

## Query Examples

```typescript
// Basic Query
export const useUserQueryOptions = (id: string) =>
  queryOptions({
    queryKey: ['user', id],
    queryFn: () => $getUser({ data: { id } }),
  })

// With Pagination & Cache
export const useUsersQueryOptions = ({ page = 1, pageSize = 10 }) =>
  queryOptions({
    queryKey: ['users', { page, pageSize }],
    queryFn: () => $getUsers({ data: { page, pageSize } }),
    placeholderData: keepPreviousData,
  })

// With Search/Filter
export const useSearchQueryOptions = (search: string) =>
  queryOptions({
    queryKey: ['search', search],
    queryFn: () => $search({ data: { query: search } }),
  })

// Private Server Function Example
const $getUsers = createServerFn({ method: 'GET' })
  .validator(type({ 
    page: 'number > 0',
    pageSize: '0 < number <= 100',
    "filter?": 'string > 0'
  }))
  .handler(async ({ data }) => {
    await requireAuthSession() // Auth check
    return someDomainFunction()
  })
```

## Mutation Examples

```typescript
// Basic Mutation with Cache Invalidation
export const useCreateUserMutation = () =>
  useMutation({
    mutationFn: (data: CreateUserData) => $createUser({ data }),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ['users'] })
    },
  })

// Private Server Function Example
const $createUser = createServerFn({ method: 'POST' })
  .validator(type({
    id: 'string',
    'profile?': {
      'avatar?': 'string',
      'bio?': 'string <= 1000'
    },
    preferences: {
      theme: "'light' | 'dark' = 'light'",
      'notifications?': 'boolean = true'
    }
  }))
  .handler(async ({ data }) => {
    try {
      requireAuthSession()
      return await createUser()
    } catch (error) {
      if (error instanceof DatabaseError) {
        return { success: false, error: error.message }
      }
      throw error
    }
  })
```

## Key Guidelines

1. File Organization
   - Group by feature in `feature-name/api/module-name.api.ts`
   - Keep related endpoints in same file

2. Naming
   - Server functions: prefix with `$` (e.g., `$getUsers`)
   - Queries: `use[Resource]QueryOptions`
   - Mutations: `use[Action][Resource]Mutation`

3. Query Keys
   - Include all dependencies: `['users', { page, filter }]`
   - Keep consistent across related queries

4. Best Practices
   - Always use validation
   - Always use `requireAuthSession()`
   - Handle errors appropriately
  