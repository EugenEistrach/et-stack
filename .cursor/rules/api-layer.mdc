---
description: API layer guidelines including TanStack Start server functions, query/mutation patterns, and best practices
globs: 
---
 # API Layer Guidelines

## Core Concepts

- Uses TanStack Start for type-safe server functions
- Server functions are private and prefixed with `$`
- Exposed through query/mutation options
- Follows a consistent file organization pattern
- validation details can be found here [validation.mdc](mdc:.cursor/rules/validation.mdc)

## File Organization

```
src/features/
└── feature-name/
    └── api/
        └── module-name.api.ts  # API endpoints for specific module
```

## Basic Structure

A `.api.ts` file follows this pattern:

```typescript
// 1. Query/Mutation Options (top)
export const useDataQueryOptions = (params: DataParams) =>
	queryOptions({
		queryKey: ['data', params],
		queryFn: () => $getData({ data: params }),
	})

// 2. Private Server Functions (bottom)
const $getData = createServerFn({ method: 'GET' })
	.middleware([loggingMiddleware])
	.validator(validationSchema)
	.handler(async ({ data }) => {
		// Implementation
	})
```

## Query Pattern

```typescript
// Export query options for data fetching
export const useItemsQueryOptions = (params: ItemsParams) =>
	queryOptions({
		queryKey: ['items', params],
		queryFn: () => $getItems({ data: params }),
		refetchInterval: 10000,
	})

// Private server function
const $getItems = createServerFn({ method: 'GET' })
	.middleware([loggingMiddleware])
	.validator(itemsSchema)
	.handler(async ({ data }) => {
		// Implementation
	})

// Usage in component:
const { data } = useSuspenseQuery(useItemsQueryOptions(params))
```

## Mutation Pattern

```typescript
// Export mutation function for state changes
export const useCreateItemMutation = () =>
	useMutation({
		mutationFn: (data: CreateItemData) => $createItem({ data }),
		// ... other options
	})

// Private server function
const $createItem = createServerFn({ method: 'POST' })
	.middleware([loggingMiddleware])
	.validator(createItemSchema)
	.handler(async ({ data }) => {
		// Implementation
	})

// Usage in component:
const { mutate } = useCreateItemMutation()
```

## Best Practices

1. File Organization
   - Place all API code in `.api.ts` files
   - Keep related endpoints in the same file
   - Group by feature/module

2. Naming Conventions
   - Private server functions: prefix with `$` (e.g., `$getItems`)
   - Query options: `use[Resource]QueryOptions`
   - Mutations: `use[Action][Resource]Mutation`

3. Query Keys
   - Use consistent patterns for query keys
   - Include all dependencies in the key
   - Example: `['items', { page, filter }]`

4. Error Handling
   ```typescript
   const $handleErrors = createServerFn({ method: 'POST' })
   	.middleware([loggingMiddleware])
   	.validator(schema)
   	.handler(async ({ data }) => {
   		try {
   			const result = await someOperation(data)
   			return { success: true, data: result }
   		} catch (error) {
   			if (error instanceof Error) {
   				return { success: false, error: error.message }
   			}
   			throw error
   		}
   	})
   ```

5. Authentication
   ```typescript
   const $protectedEndpoint = createServerFn({ method: 'POST' })
   	.middleware([loggingMiddleware])
   	.validator(schema)
   	.handler(async ({ data }) => {
   		await requireAuthSession()
   		// Implementation
   	})
   ```

6. Pagination
   ```typescript
   export const useItemsQueryOptions = ({
   	page = 1,
   	pageSize = DEFAULT_PAGE_SIZE,
   }) =>
   	queryOptions({
   		queryKey: ['items', page, pageSize],
   		queryFn: () => $getItems({ data: { page, pageSize } }),
   		placeholderData: keepPreviousData,
   	})
   ```

## Common Patterns

### Complete Feature API File

```typescript
// items.api.ts

// Query Options
export const useItemsQueryOptions = (params: ItemParams) =>
	queryOptions({
		queryKey: ['items', params],
		queryFn: () => $getItems({ data: params }),
	})

export const useCreateItemMutation = () =>
	useMutation({
		mutationFn: (data: CreateItemData) => $createItem({ data }),
	})

// Private Server Functions
const $getItems = createServerFn({ method: 'GET' })
	.middleware([loggingMiddleware])
	.validator(itemsSchema)
	.handler(async ({ data }) => {
		// Implementation
	})

const $createItem = createServerFn({ method: 'POST' })
	.middleware([loggingMiddleware])
	.validator(createItemSchema)
	.handler(async ({ data }) => {
		// Implementation
	})
```

