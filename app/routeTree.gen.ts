/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './../src/routes/__root'
import { Route as DashboardImport } from './../src/routes/dashboard'
import { Route as MarketingImport } from './../src/routes/_marketing'
import { Route as DashboardindexImport } from '../src/routes/dashboard'
import { Route as MarketingIndexImport } from './../src/routes/_marketing/index'
import { Route as DashboardsettingsImport } from '../src/routes/dashboard/settings'
import { Route as MarketingTermsImport } from './../src/routes/_marketing/terms'
import { Route as MarketingPrivacyImport } from './../src/routes/_marketing/privacy'
import { Route as authOnboardingImport } from './../src/routes/(auth)/onboarding'
import { Route as authLoginImport } from './../src/routes/(auth)/login'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
	id: '/dashboard',
	path: '/dashboard',
	getParentRoute: () => rootRoute,
} as any)

const MarketingRoute = MarketingImport.update({
	id: '/_marketing',
	getParentRoute: () => rootRoute,
} as any)

const DashboardindexRoute = DashboardindexImport.update({
	id: '/~index',
	path: '/~index',
	getParentRoute: () => DashboardRoute,
} as any)

const MarketingIndexRoute = MarketingIndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => MarketingRoute,
} as any)

const DashboardsettingsRoute = DashboardsettingsImport.update({
	id: '/~settings',
	path: '/~settings',
	getParentRoute: () => DashboardRoute,
} as any)

const MarketingTermsRoute = MarketingTermsImport.update({
	id: '/terms',
	path: '/terms',
	getParentRoute: () => MarketingRoute,
} as any)

const MarketingPrivacyRoute = MarketingPrivacyImport.update({
	id: '/privacy',
	path: '/privacy',
	getParentRoute: () => MarketingRoute,
} as any)

const authOnboardingRoute = authOnboardingImport.update({
	id: '/(auth)/onboarding',
	path: '/onboarding',
	getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
	id: '/(auth)/login',
	path: '/login',
	getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/_marketing': {
			id: '/_marketing'
			path: ''
			fullPath: ''
			preLoaderRoute: typeof MarketingImport
			parentRoute: typeof rootRoute
		}
		'/dashboard': {
			id: '/dashboard'
			path: '/dashboard'
			fullPath: '/dashboard'
			preLoaderRoute: typeof DashboardImport
			parentRoute: typeof rootRoute
		}
		'/(auth)/login': {
			id: '/(auth)/login'
			path: '/login'
			fullPath: '/login'
			preLoaderRoute: typeof authLoginImport
			parentRoute: typeof rootRoute
		}
		'/(auth)/onboarding': {
			id: '/(auth)/onboarding'
			path: '/onboarding'
			fullPath: '/onboarding'
			preLoaderRoute: typeof authOnboardingImport
			parentRoute: typeof rootRoute
		}
		'/_marketing/privacy': {
			id: '/_marketing/privacy'
			path: '/privacy'
			fullPath: '/privacy'
			preLoaderRoute: typeof MarketingPrivacyImport
			parentRoute: typeof MarketingImport
		}
		'/_marketing/terms': {
			id: '/_marketing/terms'
			path: '/terms'
			fullPath: '/terms'
			preLoaderRoute: typeof MarketingTermsImport
			parentRoute: typeof MarketingImport
		}
		'/dashboard/~index': {
			id: '/dashboard/~index'
			path: '/~index'
			fullPath: '/dashboard/~index'
			preLoaderRoute: typeof DashboardindexImport
			parentRoute: typeof DashboardImport
		}
		'/dashboard/~settings': {
			id: '/dashboard/~settings'
			path: '/~settings'
			fullPath: '/dashboard/~settings'
			preLoaderRoute: typeof DashboardsettingsImport
			parentRoute: typeof DashboardImport
		}
		'/_marketing/': {
			id: '/_marketing/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof MarketingIndexImport
			parentRoute: typeof MarketingImport
		}
	}
}

// Create and export the route tree

interface MarketingRouteChildren {
	MarketingPrivacyRoute: typeof MarketingPrivacyRoute
	MarketingTermsRoute: typeof MarketingTermsRoute
	MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteChildren: MarketingRouteChildren = {
	MarketingPrivacyRoute: MarketingPrivacyRoute,
	MarketingTermsRoute: MarketingTermsRoute,
	MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteWithChildren = MarketingRoute._addFileChildren(
	MarketingRouteChildren,
)

interface DashboardRouteChildren {
	DashboardindexRoute: typeof DashboardindexRoute
	DashboardsettingsRoute: typeof DashboardsettingsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
	DashboardindexRoute: DashboardindexRoute,
	DashboardsettingsRoute: DashboardsettingsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
	DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
	'': typeof MarketingRouteWithChildren
	'/dashboard': typeof DashboardRouteWithChildren
	'/login': typeof authLoginRoute
	'/onboarding': typeof authOnboardingRoute
	'/privacy': typeof MarketingPrivacyRoute
	'/terms': typeof MarketingTermsRoute
	'/dashboard/~index': typeof DashboardindexRoute
	'/dashboard/~settings': typeof DashboardsettingsRoute
	'/': typeof MarketingIndexRoute
}

export interface FileRoutesByTo {
	'/dashboard': typeof DashboardRouteWithChildren
	'/login': typeof authLoginRoute
	'/onboarding': typeof authOnboardingRoute
	'/privacy': typeof MarketingPrivacyRoute
	'/terms': typeof MarketingTermsRoute
	'/dashboard/~index': typeof DashboardindexRoute
	'/dashboard/~settings': typeof DashboardsettingsRoute
	'/': typeof MarketingIndexRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/_marketing': typeof MarketingRouteWithChildren
	'/dashboard': typeof DashboardRouteWithChildren
	'/(auth)/login': typeof authLoginRoute
	'/(auth)/onboarding': typeof authOnboardingRoute
	'/_marketing/privacy': typeof MarketingPrivacyRoute
	'/_marketing/terms': typeof MarketingTermsRoute
	'/dashboard/~index': typeof DashboardindexRoute
	'/dashboard/~settings': typeof DashboardsettingsRoute
	'/_marketing/': typeof MarketingIndexRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths:
		| ''
		| '/dashboard'
		| '/login'
		| '/onboarding'
		| '/privacy'
		| '/terms'
		| '/dashboard/~index'
		| '/dashboard/~settings'
		| '/'
	fileRoutesByTo: FileRoutesByTo
	to:
		| '/dashboard'
		| '/login'
		| '/onboarding'
		| '/privacy'
		| '/terms'
		| '/dashboard/~index'
		| '/dashboard/~settings'
		| '/'
	id:
		| '__root__'
		| '/_marketing'
		| '/dashboard'
		| '/(auth)/login'
		| '/(auth)/onboarding'
		| '/_marketing/privacy'
		| '/_marketing/terms'
		| '/dashboard/~index'
		| '/dashboard/~settings'
		| '/_marketing/'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	MarketingRoute: typeof MarketingRouteWithChildren
	DashboardRoute: typeof DashboardRouteWithChildren
	authLoginRoute: typeof authLoginRoute
	authOnboardingRoute: typeof authOnboardingRoute
}

const rootRouteChildren: RootRouteChildren = {
	MarketingRoute: MarketingRouteWithChildren,
	DashboardRoute: DashboardRouteWithChildren,
	authLoginRoute: authLoginRoute,
	authOnboardingRoute: authOnboardingRoute,
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_marketing",
        "/dashboard",
        "/(auth)/login",
        "/(auth)/onboarding"
      ]
    },
    "/_marketing": {
      "filePath": "_marketing.tsx",
      "children": [
        "/_marketing/privacy",
        "/_marketing/terms",
        "/_marketing/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/~index",
        "/dashboard/~settings"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/onboarding": {
      "filePath": "(auth)/onboarding.tsx"
    },
    "/_marketing/privacy": {
      "filePath": "_marketing/privacy.tsx",
      "parent": "/_marketing"
    },
    "/_marketing/terms": {
      "filePath": "_marketing/terms.tsx",
      "parent": "/_marketing"
    },
    "/dashboard/~index": {
      "filePath": "dashboard/~index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/~settings": {
      "filePath": "dashboard/~settings.tsx",
      "parent": "/dashboard"
    },
    "/_marketing/": {
      "filePath": "_marketing/index.tsx",
      "parent": "/_marketing"
    }
  }
}
ROUTE_MANIFEST_END */
