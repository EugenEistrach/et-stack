# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: 🚀 Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    name: Run ${{ matrix.check }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [typecheck, lint, test, format:check]
        node-version: [22]
      fail-fast: false
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🏃 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ⎔ Setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: 💾 Setup caches
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
            .biome
          key: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/biome.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        if: matrix.check == 'test'
        run: bun run test:e2e:install

      - name: 📄 Setup env file
        if: matrix.check == 'test'
        run: cp .env.example .env

      - name: 🗃️ Initialize test database
        if: matrix.check == 'test'
        run: |
          mkdir -p src/tests/drizzle
          echo "Current directory: $(pwd)"
          echo "Directory contents before:"
          ls -la src/tests/drizzle/
          echo "Running db:reset..."
          bun run db:reset
          echo "Directory contents after:"
          ls -la src/tests/drizzle/
          echo "Database file permissions:"
          ls -la src/tests/drizzle/base.sqlite || echo "base.sqlite not found"

      - name: 🏃 Run ${{ matrix.check }}
        run: bun run ${{ matrix.check }}

  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🏃 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: 💾 Setup caches
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: bun run test:e2e:install

      - name: 📄 Setup env file
        run: cp .env.example .env

      - name: 🗃️ Setup Database
        run: bun run db:reset

      - name: 🏗️ Build app
        run: bun run build

      - name: 🎭 Run E2E Tests
        run: bun run test:e2e:run
        env:
          CI: true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  storybook:
    name: 📚 Storybook Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🏃 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: 💾 Setup caches
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
            storybook-static
          key: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: bun run test:e2e:install

      - name: 📄 Setup env file
        run: cp .env.example .env

      - name: 📚 Build Storybook
        run: bun run build-storybook

      - name: 🎭 Run Storybook Tests
        run: bun run test:storybook
        env:
          CI: true

      - name: 📊 Upload Storybook snapshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storybook-snapshots
          path: |
            src/tests/storybook/stories.spec.ts-snapshots/
          retention-days: 30

  deploy:
    name: Deploy app
    needs: [checks, e2e]
    runs-on: ubuntu-latest
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-trigger:
    name: Deploy Trigger.dev
    needs: [checks, e2e]
    runs-on: ubuntu-latest
    concurrency: trigger-deploy-group
    steps:
      - uses: actions/checkout@v4

      - name: 🏃 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: bun install

      - name: 🚀 Deploy Trigger.dev
        id: deploy
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: |
          set -euxo pipefail
          # Capture exit code explicitly
          bun run deploy-trigger || DEPLOY_EXIT=$?

          # Always attempt to print logs if they exist
          echo "=== Trigger.dev Build Logs ==="
          cat /tmp/trigger-*/build-*.log || echo "No build logs found"

          # Exit with proper code based on deployment success
          if [ -n "${DEPLOY_EXIT:-}" ]; then
            echo "Trigger.dev deployment failed with exit code $DEPLOY_EXIT"
            exit 1
          fi
