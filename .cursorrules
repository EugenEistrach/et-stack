**Every time you choose to apply a rule(s), explicitly state the rule(s) in the
output. You can abbreviate the rule description to a single word or phrase.**

## Project Context

A comprehensive boilerplate project to jumpstart new React applications with
modern tooling and best practices.

- Type-safe full-stack development with TanStack
- Modern authentication with GitHub/Discord SSO
- Hybrid database approach:
  - Local: Direct SQLite for development
  - Production: Turso for global distribution
- Component library with shadcn/ui
- Comprehensive testing setup

## Tech Stack

- React 19
- TanStack (Router, Query, Start)
- TypeScript
- SQLite (local) / Turso (production) with Drizzle ORM
- Better-auth with GitHub/Discord SSO
- TailwindCSS with shadcn/ui
- trigger.dev for background jobs
- Fly.io for deployment and hosting
- vitest for testing
- valibot for type-safe validation

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer duplicating code over premature abstraction (Write Everything Twice
  principle)
- Use descriptive variable names with auxiliary verbs (e.g., isLoading,
  hasError)
- Structure repository files as follows:

```
src/
├── components/     # Shared UI components
├── data/          # Data layer utilities
├── drizzle/       # Database schemas and migrations
├── features/      # Feature-specific code
│   └── feature-name/
│       ├── ui/         # UI components
│       ├── api/        # Server functions + React Query
│       ├── domain/     # Business logic + DB operations
│       └── templates/  # Templates
├── hooks/         # Shared React hooks
├── lib/           # Shared utilities
├── routes/        # Route components
├── styles/        # Global styles
├── tasks/         # Background tasks
└── tests/         # Test utilities and mocks
```

## Naming Conventions

- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Component files: component-name.tsx
- Server/API files:
  - Server logic: module-name.server.ts
  - API layer: module-name.api.ts

## Additional Documentation

Detailed guidelines for specific areas can be found in the following files:

- `docs/api.md` - API development and integration
- `docs/client.md` - Client-side and UI development
- `docs/commit-conventions.md` - Git commit message standards
- `docs/deployments.md` - Deployment procedures
- `docs/i18n.md` - Internationalization
- `docs/logging.md` - Logging standards
- `docs/routing.md` - Route creation and navigation
- `docs/server.md` - Server-side development
- `docs/unit-testing.md` - Testing guidelines
- `docs/validation.md` - Data validation patterns
- `docs/workflow.md` - Development workflows

## Development Workflow

For each feature or task, follow this workflow (detailed guide in
`docs/workflow.md`):

1. **Documentation Analysis**

   - Review relevant documentation for your task
   - For UI changes: `client.md`, for API: `api.md`, etc.
   - For routes: `routing.md` for navigation and auth patterns
   - Document key requirements and patterns to follow

2. **Implementation Flow**

   - Start with route setup (src/routes/)
     - Create route files following routing.md patterns
     - Configure navigation and auth requirements
   - Build UI components (src/features/[feature]/ui/)
     - Create components following client.md patterns
     - Use shadcn/ui components and TailwindCSS
   - Build API layer (src/features/[feature]/api/)
     - Define server functions with validation
     - Set up React Query hooks
   - Add domain logic (src/features/[feature]/domain/)
     - Implement business logic in .server.ts
     - Add database operations with Drizzle

3. **Testing & Validation**
   - Write tests following unit-testing.md
   - Validate against documentation guidelines

This workflow ensures consistent development from UI to database. For detailed
examples and best practices, refer to `docs/workflow.md`.
