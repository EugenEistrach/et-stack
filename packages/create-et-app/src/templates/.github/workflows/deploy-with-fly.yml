# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: 🚀 Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    name: Run ${{ matrix.check }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [typecheck, lint, test]
        node-version: [20]
      fail-fast: false
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: ⎔ Setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📁 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 💾 Setup caches
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules
            ~/.cache/ms-playwright
          key: |
            ${{ runner.os }}-cache-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🎭 Install Playwright browsers
        if: matrix.check == 'test'
        run: pnpm test:e2e:install

      - name: 🌐 Build paraglide
        run: pnpm build:paraglide

      - name: 📄 Setup env file
        if: matrix.check == 'test'
        run: cp .env.example .env

      - name: 🏃 Run ${{ matrix.check }}
        run: pnpm ${{ matrix.check }}

  playwright:
    name: 🎭 Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📁 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 💾 Setup caches
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            node_modules
            ~/.cache/ms-playwright
            storybook-static
          key: |
            ${{ runner.os }}-cache-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🌐 Build paraglide
        run: pnpm build:paraglide

      - name: 🎭 Install Playwright browsers
        run: pnpm test:e2e:install

      - name: 📄 Setup env file
        run: cp .env.example .env

      - name: 🗃️ Setup Database
        run: pnpm db:reset

      - name: 🎭 Run E2E Tests
        run: pnpm test:e2e:run
        env:
          TEST_PROJECT: e2e

      - name: 🎭 Run Storybook Tests
        run: pnpm test:storybook
        env:
          CI: true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
            src/tests/storybook/stories.spec.ts-snapshots/
          retention-days: 30

  deploy:
    name: Deploy app
    needs: [checks, playwright]
    runs-on: ubuntu-latest
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: 🏥 Health check
        run: |
          max_attempts=24  # 2 minutes with 5 second intervals
          attempt=1
          # Get the app URL from flyctl status
          url=$(flyctl status --json | jq -r '.Hostname')

          if [ -z "$url" ]; then
            echo "Failed to get application URL from flyctl"
            exit 1
          fi

          url="https://$url"
          echo "Checking health of $url"

          while [ $attempt -le $max_attempts ]; do
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "failed")

            if [ "$status_code" = "200" ]; then
              echo "Health check passed! Site is up and running."
              exit 0
            fi

            echo "Attempt $attempt/$max_attempts: Site returned status $status_code"

            if [ $attempt -eq $max_attempts ]; then
              echo "Health check failed: Maximum attempts reached"
              exit 1
            fi

            sleep 5
            attempt=$((attempt + 1))
          done

          echo "Health check failed: Script should not reach this point"
          exit 1
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
